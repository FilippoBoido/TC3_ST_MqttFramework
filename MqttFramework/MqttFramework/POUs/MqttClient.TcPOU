<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.2">
  <POU Name="MqttClient" Id="{a9904573-1d06-4478-8539-d64d4604b034}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK MqttClient EXTENDS StateMachine
VAR_INPUT
END_VAR
VAR_OUTPUT
	
END_VAR

VAR
	bPublishing : BOOL;
	bPublished : BOOL;
	bSubscribing : BOOL;
	bSubscribed : BOOL;
	bPublishingMessage : BOOL;
	bPublishedMessage : BOOL;
	uiSubscriptionCounter : UINT := 1;
	uiPublicationCounter : UINT := 1;
	uiMessageCounter : UINT := 0;
	
	uiSizeOfSubscriptions : UINT;
	uiSizeOfPublications : UINT;
	
	aAdsSubscriptionStorage : ARRAY[1..cMaxSubscriptions] OF ST_MqttAdsShell;
	
	aAdsPublicationStorage : ARRAY[1..cMaxPublications] OF ST_MqttAdsShell;
	aAdsOldPublications : ARRAY[1..cMaxPublications] OF ST_MqttAdsShell;
	
	
	aAdsMessageStorage : ARRAY[1..cMaxMessages] OF ST_MqttMessage;
	aAdsOldMessages : ARRAY[1..cMaxMessages] OF ST_MqttMessage;
	
	sizeOfAdsShell : UINT;
	
	i : UINT;
	pvLockPublish : PVOID;
	pvLockSubscribe : PVOID;
END_VAR

VAR CONSTANT
	cMaxSubscriptions : UINT := 10;
	cMaxPublications : UINT := 10;
	cMaxMessages : UINT := 10;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();
Start();]]></ST>
    </Implementation>
    <Folder Name="StateMachine" Id="{e219cd41-9610-407f-b4ed-9df13e5fae30}" />
    <Method Name="Busy" Id="{fc714c6c-11a3-4bb1-b35e-e4c26c799a3c}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED Busy : BOOL
VAR_INPUT
END_VAR
VAR_INST
	eAdsConnectorBusy : E_AdsConnectorBusy;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Error" Id="{36035d46-88bf-453a-b0c1-0bc62b8a89e5}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED  Error : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="getNewMessage" Id="{2b8aaccd-97e7-4e22-9aff-94f5dd801ca2}">
      <Declaration><![CDATA[METHOD getNewMessage : ST_MqttPayload
VAR_INPUT
	index : UINT;
END_VAR
VAR
	stEmptyMqttPayload : ST_MqttPayload;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF index > 0
	AND index <= cMaxSubscriptions 
THEN
	aAdsSubscriptionStorage[index].bNewMessage := FALSE;
	getNewMessage := aAdsSubscriptionStorage[index].stMqttPayload;
	aAdsSubscriptionStorage[index].stMqttPayload := stEmptyMqttPayload;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Idle" Id="{f2b37aac-75e1-45d1-adb2-6115990781c2}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED  Idle : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{6d9582f2-fc30-494a-a725-136ab2304568}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED  Init : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[uiSizeOfSubscriptions := SIZEOF(aAdsSubscriptionStorage);
uiSizeOfPublications := SIZEOF(aAdsPublicationStorage);

sizeOfAdsShell := SIZEOF(ST_MQTTADSSHELL);]]></ST>
      </Implementation>
    </Method>
    <Method Name="isNewMessage" Id="{12c826f3-1d82-472b-9ba8-baf5d56c084c}">
      <Declaration><![CDATA[METHOD isNewMessage : UINT
VAR_INPUT
	sTopic : STRING(8);
END_VAR
VAR
	i : UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 1 TO cMaxSubscriptions
DO
	IF aAdsSubscriptionStorage[i].sTopic = sTopic 
		AND_THEN aAdsSubscriptionStorage[i].bNewMessage
	THEN
		isNewMessage := i;
		RETURN;
	END_IF
	
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="isPublishing" Id="{7408ae89-8ad6-4ecf-8a1d-0562f7f0d7db}">
      <Declaration><![CDATA[METHOD isPublishing : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[isPublishing := bPublishing;]]></ST>
      </Implementation>
    </Method>
    <Method Name="isSubscribing" Id="{5b26892c-b136-42b1-b573-f2048441700b}">
      <Declaration><![CDATA[METHOD isSubscribing : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[isSubscribing := bSubscribing;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Prepare" Id="{ac43893e-86e6-4b98-bf1a-bbd127d69842}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED  Prepare : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="publish" Id="{af1bedd9-5057-4118-abdc-a50473914887}">
      <Declaration><![CDATA[METHOD publish : BOOL //Return true if published
VAR_INPUT
	sTopic : STRING(8);
	stMqttPayload : ST_MqttPayload;
	pvLock : PVOID;
END_VAR

VAR
	aEmptyPublicationStorage : ARRAY[1..cMaxPublications] OF ST_MqttAdsShell;
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  (	bPublishing
		AND NOT bPublished)
	OR 
	(	bPublishing 
		AND bPublished
		AND THIS^.pvLockPublish <> pvLock)		
THEN

	RETURN;
	
ELSIF 	bPublishing 
	AND bPublished
	AND THIS^.pvLockPublish = pvLock
THEN

	bPublishing := FALSE;
	bPublished := FALSE;
	Publish := TRUE;
	RETURN;
	
ELSIF 	NOT bPublishing
	AND NOT bPublished
THEN
 
	THIS^.pvLockPublish := pvLock;
	bPublishing := TRUE;
	
END_IF

IF uiPublicationCounter > cMaxPublications
THEN
	aAdsOldPublications := aAdsPublicationStorage;
	aAdsPublicationStorage := aEmptyPublicationStorage;	
	uiPublicationCounter := 1;
END_IF

aAdsPublicationStorage[uiPublicationCounter].stMqttPayload := stMqttPayload;
aAdsPublicationStorage[uiPublicationCounter].sTopic := sTopic;
uiPublicationCounter := uiPublicationCounter + 1;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="publishMessage" Id="{c52c1d47-e2fc-4270-849e-c1c5e503e648}">
      <Declaration><![CDATA[METHOD publishMessage : BOOL
VAR_INPUT
	sTopic : STRING(8);
	sMessage : T_MAXSTRING;
	pvLock : PVOID;
END_VAR

VAR
	aEmptyMessages : ARRAY[1..cMaxMessages] OF ST_MqttMessage;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  (	bPublishingMessage
		AND NOT bPublishedMessage)
	OR 
	(	bPublishingMessage 
		AND bPublishedMessage
		AND THIS^.pvLockPublish <> pvLock)		
THEN

	RETURN;
	
ELSIF 	bPublishingMessage 
	AND bPublishedMessage
	AND THIS^.pvLockPublish = pvLock
THEN

	bPublishingMessage := FALSE;
	bPublishedMessage := FALSE;
	publishMessage := TRUE;
	RETURN;
	
ELSIF 	NOT bPublishingMessage
	AND NOT bPublishedMessage
THEN
 
	THIS^.pvLockPublish := pvLock;
	bPublishingMessage := TRUE;
	
END_IF

IF uiMessageCounter > cMaxMessages
THEN
	aAdsOldMessages := aAdsMessageStorage;
	aAdsMessageStorage := aEmptyMessages;	
	uiMessageCounter := 0;
END_IF

uiMessageCounter := uiMessageCounter + 1;
aAdsMessageStorage[uiMessageCounter].sMessage := sMessage;
aAdsMessageStorage[uiMessageCounter].sTopic := sTopic;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Ready" Id="{276525ab-8c0c-4f7e-9451-178516549953}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED  Ready : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
Check conditions to fire Execute() here and put the StateMachine in Busy mode
*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="subscribe" Id="{76f556c2-933e-41ef-8e37-b2f14dd034d4}">
      <Declaration><![CDATA[METHOD subscribe : BOOL  //Return true if subscribed
VAR_INPUT
	sTopic : STRING(8);
	pvLock : POINTER TO PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF 	uiSubscriptionCounter > cMaxSubscriptions
	OR
	(	bSubscribing = TRUE 
		AND bSubscribed = FALSE) 
	OR
	(	bSubscribing = TRUE
		AND bSubscribed = TRUE
		AND pvLockSubscribe <> pvLock)		
THEN

	RETURN;
	
ELSIF 	bSubscribing = TRUE
		AND bSubscribed = TRUE
		AND pvLockSubscribe = pvLock
THEN

	bSubscribing := FALSE;
	bSubscribed := FALSE;
	Subscribe := TRUE;
	
	RETURN;
	
ELSIF	bSubscribing = FALSE
		AND bSubscribed = FALSE
THEN

	bSubscribing := TRUE;
	pvLockSubscribe := pvLock;
	
END_IF

aAdsSubscriptionStorage[uiSubscriptionCounter].sTopic := sTopic;
uiSubscriptionCounter := uiSubscriptionCounter + 1;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Waiting" Id="{c489313b-bd3b-4ab8-96a1-8021a3677c8a}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED  Waiting : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="MqttClient">
      <LineId Id="73" Count="0" />
      <LineId Id="42" Count="0" />
    </LineIds>
    <LineIds Name="MqttClient.Busy">
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="MqttClient.Error">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MqttClient.getNewMessage">
      <LineId Id="20" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MqttClient.Idle">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MqttClient.Init">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="MqttClient.isNewMessage">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="6" />
      <LineId Id="18" Count="0" />
      <LineId Id="16" Count="1" />
    </LineIds>
    <LineIds Name="MqttClient.isPublishing">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MqttClient.isSubscribing">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MqttClient.Prepare">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MqttClient.publish">
      <LineId Id="26" Count="1" />
      <LineId Id="74" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="65" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="81" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="78" Count="2" />
      <LineId Id="82" Count="2" />
      <LineId Id="18" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="49" Count="2" />
      <LineId Id="56" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="37" Count="1" />
      <LineId Id="36" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MqttClient.publishMessage">
      <LineId Id="10" Count="34" />
      <LineId Id="58" Count="0" />
      <LineId Id="45" Count="3" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MqttClient.Ready">
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="MqttClient.subscribe">
      <LineId Id="12" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="45" Count="1" />
      <LineId Id="48" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="52" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="55" Count="1" />
      <LineId Id="54" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="63" Count="1" />
      <LineId Id="26" Count="1" />
      <LineId Id="38" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MqttClient.Waiting">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>